---
- name: Install role dependency
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  ansible.builtin.apt:
    name: python3-kubernetes
    state: present

- name: Download ArgoCD binary
  ansible.builtin.get_url:
    url: "{{ argocd_bin_url }}"
    dest: "{{ argocd_bin_path }}"
    mode: "0755"
    checksum: "{{ argocd_bin_checksum }}"

- name: Create manifests directory
  ansible.builtin.file:
    path: "{{ argocd_manifests_path | dirname }}"
    state: directory
    mode: "0755"

- name: Fetch ArgoCD manifests
  ansible.builtin.get_url:
    url: "{{ argocd_manifests_url }}"
    dest: "{{ argocd_manifests_path }}"
    mode: "0644"

- name: Create argocd namespace
  kubernetes.core.k8s:
    name: argocd
    api_version: v1
    kind: Namespace
    state: present

- name: Apply ArgoCD manifests
  kubernetes.core.k8s:
    src: "{{ argocd_manifests_path }}"
    namespace: argocd
    state: present

- name: Wait for ArgoCD to be ready
  ansible.builtin.command:
    argv:
      - kubectl
      - wait
      - -n
      - argocd
      - --for=condition=available
      - --timeout=0
      - --all
      - deploy
  register: result
  until: result.rc == 0
  retries: 40
  delay: 10
  check_mode: false
  changed_when: false

- name: Check connection to ArgoCD
  ansible.builtin.command:
    argv:
      - argocd
      - --port-forward-namespace
      - argocd
      - --port-forward
      - app
      - list
  register: auth_check
  check_mode: false
  changed_when: false
  failed_when: false

- name: Get initial admin password and login to ArgoCD
  when: auth_check.rc != 0
  block:
    - name: Get initial admin password
      ansible.builtin.command:
        argv:
          - kubectl
          - -n
          - argocd
          - get
          - secret
          - argocd-initial-admin-secret
          - -o
          - jsonpath='{.data.password}'
      register: admin_password
      check_mode: false
      changed_when: false
    - name: Login to ArgoCD
      ansible.builtin.command:
        argv:
          - argocd
          - --port-forward-namespace
          - argocd
          - --port-forward
          - login
          - --username
          - admin
          - --password
          - "{{ admin_password.stdout | b64decode }}"
      check_mode: false
      changed_when: true

- name: Add apps to ArgoCD
  ansible.builtin.include_tasks: app.yml
  with_dict: "{{ argocd_apps }}"
