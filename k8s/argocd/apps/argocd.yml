# yamllint disable rule:line-length
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  labels:
    app: argocd
spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated:
      prune: true
  destination:
    name: "in-cluster"
    namespace: argocd
  source:
    repoURL: https://argoproj.github.io/argo-helm
    chart: argo-cd
    targetRevision: 5.36.2
    helm:
      parameters:
        - name: installCRDs
          value: "true"
      values: |
        dex:
          enabled: false
        configs:
          cm:
            url: "https://argocd.mareo.fr"
            application.instanceLabelKey: "applications.argoproj.io/app-name"
            admin.enabled: false
            oidc.config: |
              name: authentik
              issuer: https://auth.mareo.fr/application/o/argocd/
              clientID: $argocd-oidc-authentik:client_id
              logoutURL: https://auth.mareo.fr/if/session-end/argocd/?id_token_hint={{token}}&post_logout_redirect_uri={{logoutRedirectURL}}
            kustomize.buildOptions: --enable-helm
            exec.enabled: "true"
          rbac:
            policy.csv: |
              g, argocd_admins, role:admin
        notifications:
          secret:
            create: false
          argocdUrl: "https://argocd.mareo.fr"
          notifiers:
            service.webhook.discord: |
              url: $webhook
              headers:
              - name: Content-Type
                value: application/json
          subscriptions:
            - recipients:
                - "discord:ignored"
              triggers:
                - on-deployed
               #- on-health-degraded
                - on-sync-failed
                - on-sync-running
               #- on-sync-status-unknown
                - on-sync-succeeded
          triggers:
            trigger.on-deployed: |
              - description: Application is synced and healthy. Triggered once per commit.
                oncePer: app.status.sync.revision
                send:
                - app-deployed
                when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
            trigger.on-health-degraded: |
              - description: Application has degraded
                send:
                - app-health-degraded
                when: app.status.health.status == 'Degraded'
            trigger.on-sync-failed: |
              - description: Application syncing has failed
                send:
                - app-sync-failed
                when: app.status.operationState.phase in ['Error', 'Failed']
            trigger.on-sync-running: |
              - description: Application is being synced
                send:
                - app-sync-running
                when: app.status.operationState.phase in ['Running']
            trigger.on-sync-status-unknown: |
              - description: Application status is 'Unknown'
                send:
                - app-sync-status-unknown
                when: app.status.sync.status == 'Unknown'
            trigger.on-sync-succeeded: |
              - description: Application syncing has succeeded
                send:
                - app-sync-succeeded
                when: app.status.operationState.phase in ['Succeeded']
            defaultTriggers: |
              - on-sync-status-unknown
          templates:
            template.app-deployed: |
              webhook:
                discord:
                  method: POST
                  body: |
                    {
                      "embeds": [
                        {
                          "author": {
                            "name": "Argo CD",
                            "url": "{{ .context.argocdUrl }}",
                            "icon_url": "{{ .context.argocdUrl }}/assets/images/logo.png"
                          },
                          "title": ":white_check_mark: {{ .app.metadata.name }}",
                          "description": "Application `{{ .app.metadata.name }}` is now running new version of deployments manifests.",
                          "url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
                          "color": 1621586,
                          "fields": [
                            {
                              "name": "Sync status",
                              "value": "{{ .app.status.sync.status }}",
                              "inline": false
                            },
                            {
                              "name": "Repository",
                              "value": "{{ .app.spec.source.repoURL }}",
                              "inline": true
                            },
                            {{ if .app.spec.source.chart }}
                            {
                              "name": "Chart",
                              "value": "{{ .app.spec.source.chart }}",
                              "inline": true
                            },
                            {{ end }}
                            {
                              "name": "Revision",
                              "value": "{{ .app.status.sync.revision }}",
                              "inline": false
                            }
                            {{ range $c := .app.status.conditions }}
                            ,
                            {
                              "name": "{{ $c.type }}",
                              "value": "{{ $c.message }}",
                              "inline": false
                            }
                            {{ end }}
                          ]
                        }
                      ]
                    }
            template.app-health-degraded: |
              message: |
                {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
                Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
              webhook:
                discord:
                  method: POST
                  body: |
                    attachments: |-
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#f4c030",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
            template.app-sync-failed: |
              webhook:
                discord:
                  method: POST
                  body: |
                    {
                      "embeds": [
                        {
                          "author": {
                            "name": "Argo CD",
                            "url": "{{ .context.argocdUrl }}",
                            "icon_url": "{{ .context.argocdUrl }}/assets/images/logo.png"
                          },
                          "title": ":exclamation: {{ .app.metadata.name }}",
                          "description": "The sync operation of application `{{ .app.metadata.name }}` has failed at {{ .app.status.operationState.finishedAt }} with the following error:\n```{{ .app.status.operationState.message }}```",
                          "url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
                          "color": 15297910,
                          "fields": [
                            {
                              "name": "Sync status",
                              "value": "{{ .app.status.sync.status }}",
                              "inline": false
                            },
                            {
                              "name": "Repository",
                              "value": "{{ .app.spec.source.repoURL }}",
                              "inline": true
                            },
                            {{ if .app.spec.source.chart }}
                            {
                              "name": "Chart",
                              "value": "{{ .app.spec.source.chart }}",
                              "inline": true
                            },
                            {{ end }}
                            {
                              "name": "Revision",
                              "value": "{{ .app.status.sync.revision }}",
                              "inline": false
                            }
                            {{ range $c := .app.status.conditions }}
                            ,
                            {
                              "name": "{{ $c.type }}",
                              "value": "{{ $c.message }}",
                              "inline": false
                            }
                            {{ end }}
                          ]
                        }
                      ]
                    }
            template.app-sync-running: |
              webhook:
                discord:
                  method: POST
                  body: |
                    {
                      "embeds": [
                        {
                          "author": {
                            "name": "Argo CD",
                            "url": "{{ .context.argocdUrl }}",
                            "icon_url": "{{ .context.argocdUrl }}/assets/images/logo.png"
                          },
                          "title": ":repeat: {{ .app.metadata.name }}",
                          "description": "The sync operation of application `{{ .app.metadata.name }}` has started at {{ .app.status.operationState.startedAt }}",
                          "url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
                          "color": 896490,
                          "fields": [
                            {
                              "name": "Sync status",
                              "value": "{{ .app.status.sync.status }}",
                              "inline": false
                            },
                            {
                              "name": "Repository",
                              "value": "{{ .app.spec.source.repoURL }}",
                              "inline": true
                            },
                            {{ if .app.spec.source.chart }}
                            {
                              "name": "Chart",
                              "value": "{{ .app.spec.source.chart }}",
                              "inline": true
                            },
                            {{ end }}
                            {
                              "name": "Revision",
                              "value": "{{ .app.status.sync.revision }}",
                              "inline": false
                            }
                            {{ range $c := .app.status.conditions }}
                            ,
                            {
                              "name": "{{ $c.type }}",
                              "value": "{{ $c.message }}",
                              "inline": false
                            }
                            {{ end }}
                          ]
                        }
                      ]
                    }
            template.app-sync-status-unknown: |
              email:
                subject: Application {{.app.metadata.name}} sync status is 'Unknown'
              message: |
                {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
                Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
                {{if ne .serviceType "slack"}}
                {{range $c := .app.status.conditions}}
                    * {{$c.message}}
                {{end}}
                {{end}}
              slack:
                attachments: |-
                  [{
                    "title": "{{ .app.metadata.name}}",
                    "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": "#E96D76",
                    "fields": [
                    {
                      "title": "Sync Status",
                      "value": "{{.app.status.sync.status}}",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "{{.app.spec.source.repoURL}}",
                      "short": true
                    }
                    {{range $index, $c := .app.status.conditions}}
                    {{if not $index}},{{end}}
                    {{if $index}},{{end}}
                    {
                      "title": "{{$c.type}}",
                      "value": "{{$c.message}}",
                      "short": true
                    }
                    {{end}}
                    ]
                  }]
            template.app-sync-succeeded: |
              webhook:
                discord:
                  method: POST
                  body: |
                    {
                      "embeds": [
                        {
                          "author": {
                            "name": "Argo CD",
                            "url": "{{ .context.argocdUrl }}",
                            "icon_url": "{{ .context.argocdUrl }}/assets/images/logo.png"
                          },
                          "title": ":white_check_mark: {{ .app.metadata.name }}",
                          "description": "Application `{{ .app.metadata.name }}` has been successfully synced at {{ .app.status.operationState.finishedAt }}",
                          "url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
                          "color": 1621586,
                          "fields": [
                            {
                              "name": "Sync status",
                              "value": "{{ .app.status.sync.status }}",
                              "inline": false
                            },
                            {
                              "name": "Repository",
                              "value": "{{ .app.spec.source.repoURL }}",
                              "inline": true
                            },
                            {{ if .app.spec.source.chart }}
                            {
                              "name": "Chart",
                              "value": "{{ .app.spec.source.chart }}",
                              "inline": true
                            },
                            {{ end }}
                            {
                              "name": "Revision",
                              "value": "{{ .app.status.sync.revision }}",
                              "inline": false
                            }
                            {{ range $c := .app.status.conditions }}
                            ,
                            {
                              "name": "{{ $c.type }}",
                              "value": "{{ $c.message }}",
                              "inline": false
                            }
                            {{ end }}
                          ]
                        }
                      ]
                    }
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        controller:
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        server:
          extensions:
            enabled: true
          ingress:
            enabled: true
            annotations:
              cert-manager.io/cluster-issuer: default-issuer
              nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            hosts:
              - argocd.mareo.fr
            https: true
            ingressClassName: public
            tls:
              - hosts:
                  - argocd.mareo.fr
                secretName: argocd-server-tls
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        repoServer:
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        applicationSet:
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
          webhook:
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: default-issuer
              hosts:
                - argocd-appset.mareo.fr
              ingressClassName: public
              tls:
                - hosts:
                    - argocd-appset.mareo.fr
                  secretName: argocd-appset-tls
